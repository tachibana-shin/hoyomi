// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{DartFnFuture, Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.11.1";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -865860840;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__image__auto_trim_image__auto_trim_image_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "auto_trim_image",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_image = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::image::auto_trim_image::auto_trim_image(api_image).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__image__auto_trim_image__auto_trim_image_sync_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "auto_trim_image_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_image = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::image::auto_trim_image::auto_trim_image_sync(api_image),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__image__decode_image_rgba__decode_image_rgba_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "decode_image_rgba",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_image_data = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok =
                        crate::api::image::decode_image_rgba::decode_image_rgba(api_image_data)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__image__get_image_size__get_image_size_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_image_size",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::image::get_image_size::get_image_size(api_data)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__image__get_image_size__get_image_size_sync_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_image_size_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::image::get_image_size::get_image_size_sync(api_data)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__http__http__rust_http_request_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_http_request",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::api::http::http::RustHttpRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let output_ok = crate::api::http::http::rust_http_request(api_req).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__image__unscramble_image__unscramble_image_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unscramble_image",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_image_data = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_blocks =
                <Vec<crate::api::image::unscramble_image::Block>>::sse_decode(&mut deserializer);
            let api_auto_trim = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok = crate::api::image::unscramble_image::unscramble_image(
                            api_image_data,
                            api_blocks,
                            api_auto_trim,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__image__unscramble_image_columns__unscramble_image_columns_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unscramble_image_columns",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_image_data = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_blocks =
                <Vec<crate::api::image::unscramble_image_columns::ColumnBlock>>::sse_decode(
                    &mut deserializer,
                );
            let api_auto_trim = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok =
                            crate::api::image::unscramble_image_columns::unscramble_image_columns(
                                api_image_data,
                                api_blocks,
                                api_auto_trim,
                            )
                            .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__image__unscramble_image_columns__unscramble_image_columns_sync_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unscramble_image_columns_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_image_data = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_blocks =
                <Vec<crate::api::image::unscramble_image_columns::ColumnBlock>>::sse_decode(
                    &mut deserializer,
                );
            let api_auto_trim = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok =
                    crate::api::image::unscramble_image_columns::unscramble_image_columns_sync(
                        api_image_data,
                        api_blocks,
                        api_auto_trim,
                    )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__image__unscramble_image_rows__unscramble_image_rows_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unscramble_image_rows",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_image_data = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_blocks = <Vec<crate::api::image::unscramble_image_rows::RowBlock>>::sse_decode(
                &mut deserializer,
            );
            let api_auto_trim = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, String>(
                    (move || async move {
                        let output_ok =
                            crate::api::image::unscramble_image_rows::unscramble_image_rows(
                                api_image_data,
                                api_blocks,
                                api_auto_trim,
                            )
                            .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__image__unscramble_image_rows__unscramble_image_rows_sync_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unscramble_image_rows_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_image_data = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_blocks = <Vec<crate::api::image::unscramble_image_rows::RowBlock>>::sse_decode(
                &mut deserializer,
            );
            let api_auto_trim = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok =
                    crate::api::image::unscramble_image_rows::unscramble_image_rows_sync(
                        api_image_data,
                        api_blocks,
                        api_auto_trim,
                    )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__image__unscramble_image__unscramble_image_sync_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unscramble_image_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_image_data = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_blocks =
                <Vec<crate::api::image::unscramble_image::Block>>::sse_decode(&mut deserializer);
            let api_auto_trim = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, String>((move || {
                let output_ok = crate::api::image::unscramble_image::unscramble_image_sync(
                    api_image_data,
                    api_blocks,
                    api_auto_trim,
                )?;
                Ok(output_ok)
            })())
        },
    )
}

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
        Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>,
    >
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for chrono::Duration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::Duration::microseconds(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::image::unscramble_image::Block {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_sx = <u32>::sse_decode(deserializer);
        let mut var_sy = <u32>::sse_decode(deserializer);
        let mut var_dx = <u32>::sse_decode(deserializer);
        let mut var_dy = <u32>::sse_decode(deserializer);
        let mut var_width = <u32>::sse_decode(deserializer);
        let mut var_height = <u32>::sse_decode(deserializer);
        return crate::api::image::unscramble_image::Block {
            sx: var_sx,
            sy: var_sy,
            dx: var_dx,
            dy: var_dy,
            width: var_width,
            height: var_height,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::image::unscramble_image_columns::ColumnBlock {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_dx = <u32>::sse_decode(deserializer);
        let mut var_width = <u32>::sse_decode(deserializer);
        return crate::api::image::unscramble_image_columns::ColumnBlock {
            dx: var_dx,
            width: var_width,
        };
    }
}

impl SseDecode for crate::api::http::http::CustomProxy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_condition = <crate::api::http::http::ProxyCondition>::sse_decode(deserializer);
        return crate::api::http::http::CustomProxy {
            url: var_url,
            condition: var_condition,
        };
    }
}

impl SseDecode for crate::api::image::decode_image_rgba::DecodedImage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_pixels = <Vec<u8>>::sse_decode(deserializer);
        let mut var_width = <u32>::sse_decode(deserializer);
        let mut var_height = <u32>::sse_decode(deserializer);
        return crate::api::image::decode_image_rgba::DecodedImage {
            pixels: var_pixels,
            width: var_width,
            height: var_height,
        };
    }
}

impl SseDecode for crate::api::http::http::DnsSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_overrides = <Option<Vec<(String, Vec<String>)>>>::sse_decode(deserializer);
        let mut var_fallback = <Option<String>>::sse_decode(deserializer);
        let mut var_resolver = <Option<
            Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>,
        >>::sse_decode(deserializer);
        return crate::api::http::http::DnsSettings {
            overrides: var_overrides,
            fallback: var_fallback,
            resolver: var_resolver,
        };
    }
}

impl SseDecode for crate::api::http::http::Emulation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::http::http::Emulation::Chrome100,
            1 => crate::api::http::http::Emulation::Chrome101,
            2 => crate::api::http::http::Emulation::Chrome104,
            3 => crate::api::http::http::Emulation::Chrome105,
            4 => crate::api::http::http::Emulation::Chrome106,
            5 => crate::api::http::http::Emulation::Chrome107,
            6 => crate::api::http::http::Emulation::Chrome108,
            7 => crate::api::http::http::Emulation::Chrome109,
            8 => crate::api::http::http::Emulation::Chrome110,
            9 => crate::api::http::http::Emulation::Chrome114,
            10 => crate::api::http::http::Emulation::Chrome116,
            11 => crate::api::http::http::Emulation::Chrome117,
            12 => crate::api::http::http::Emulation::Chrome118,
            13 => crate::api::http::http::Emulation::Chrome119,
            14 => crate::api::http::http::Emulation::Chrome120,
            15 => crate::api::http::http::Emulation::Chrome123,
            16 => crate::api::http::http::Emulation::Chrome124,
            17 => crate::api::http::http::Emulation::Chrome126,
            18 => crate::api::http::http::Emulation::Chrome127,
            19 => crate::api::http::http::Emulation::Chrome128,
            20 => crate::api::http::http::Emulation::Chrome129,
            21 => crate::api::http::http::Emulation::Chrome130,
            22 => crate::api::http::http::Emulation::Chrome131,
            23 => crate::api::http::http::Emulation::Chrome132,
            24 => crate::api::http::http::Emulation::Chrome133,
            25 => crate::api::http::http::Emulation::Chrome134,
            26 => crate::api::http::http::Emulation::Chrome135,
            27 => crate::api::http::http::Emulation::Chrome136,
            28 => crate::api::http::http::Emulation::SafariIos17_2,
            29 => crate::api::http::http::Emulation::SafariIos17_4_1,
            30 => crate::api::http::http::Emulation::SafariIos16_5,
            31 => crate::api::http::http::Emulation::Safari15_3,
            32 => crate::api::http::http::Emulation::Safari15_5,
            33 => crate::api::http::http::Emulation::Safari15_6_1,
            34 => crate::api::http::http::Emulation::Safari16,
            35 => crate::api::http::http::Emulation::Safari16_5,
            36 => crate::api::http::http::Emulation::Safari17_0,
            37 => crate::api::http::http::Emulation::Safari17_2_1,
            38 => crate::api::http::http::Emulation::Safari17_4_1,
            39 => crate::api::http::http::Emulation::Safari17_5,
            40 => crate::api::http::http::Emulation::Safari18,
            41 => crate::api::http::http::Emulation::SafariIPad18,
            42 => crate::api::http::http::Emulation::Safari18_2,
            43 => crate::api::http::http::Emulation::SafariIos18_1_1,
            44 => crate::api::http::http::Emulation::Safari18_3,
            45 => crate::api::http::http::Emulation::Safari18_3_1,
            46 => crate::api::http::http::Emulation::OkHttp3_9,
            47 => crate::api::http::http::Emulation::OkHttp3_11,
            48 => crate::api::http::http::Emulation::OkHttp3_13,
            49 => crate::api::http::http::Emulation::OkHttp3_14,
            50 => crate::api::http::http::Emulation::OkHttp4_9,
            51 => crate::api::http::http::Emulation::OkHttp4_10,
            52 => crate::api::http::http::Emulation::OkHttp4_12,
            53 => crate::api::http::http::Emulation::OkHttp5,
            54 => crate::api::http::http::Emulation::Edge101,
            55 => crate::api::http::http::Emulation::Edge122,
            56 => crate::api::http::http::Emulation::Edge127,
            57 => crate::api::http::http::Emulation::Edge131,
            58 => crate::api::http::http::Emulation::Edge134,
            59 => crate::api::http::http::Emulation::Firefox109,
            60 => crate::api::http::http::Emulation::Firefox117,
            61 => crate::api::http::http::Emulation::Firefox128,
            62 => crate::api::http::http::Emulation::Firefox133,
            63 => crate::api::http::http::Emulation::Firefox135,
            64 => crate::api::http::http::Emulation::FirefoxPrivate135,
            65 => crate::api::http::http::Emulation::FirefoxAndroid135,
            66 => crate::api::http::http::Emulation::Firefox136,
            67 => crate::api::http::http::Emulation::FirefoxPrivate136,
            _ => unreachable!("Invalid variant for Emulation: {}", inner),
        };
    }
}

impl SseDecode for crate::api::http::http::HttpVersionPref {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::http::http::HttpVersionPref::Http10,
            1 => crate::api::http::http::HttpVersionPref::Http11,
            2 => crate::api::http::http::HttpVersionPref::Http2,
            3 => crate::api::http::http::HttpVersionPref::All,
            _ => unreachable!("Invalid variant for HttpVersionPref: {}", inner),
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::image::unscramble_image::Block> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::image::unscramble_image::Block>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::image::unscramble_image_columns::ColumnBlock> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::image::unscramble_image_columns::ColumnBlock>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::http::http::CustomProxy> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::http::http::CustomProxy>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Vec<u8>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, Vec<String>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, Vec<String>)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::image::unscramble_image_rows::RowBlock> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::image::unscramble_image_rows::RowBlock>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Arc<
                dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::Duration> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::Duration>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::http::http::DnsSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::http::http::DnsSettings>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::http::http::Emulation> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::http::http::Emulation>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::http::http::HttpVersionPref> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::http::http::HttpVersionPref>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::http::http::ProxySettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::http::http::ProxySettings>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::http::http::RedirectSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::http::http::RedirectSettings>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::http::http::TimeoutSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::http::http::TimeoutSettings>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::http::http::TlsSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::http::http::TlsSettings>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::http::http::TlsVersion> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::http::http::TlsVersion>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<(String, Vec<String>)>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<(String, Vec<String>)>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<(String, String)>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<(String, String)>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::http::http::ProxyCondition {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::http::http::ProxyCondition::Http,
            1 => crate::api::http::http::ProxyCondition::Https,
            2 => crate::api::http::http::ProxyCondition::All,
            _ => unreachable!("Invalid variant for ProxyCondition: {}", inner),
        };
    }
}

impl SseDecode for crate::api::http::http::ProxySettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::http::http::ProxySettings::NoProxy;
            }
            1 => {
                let mut var_field0 =
                    <Vec<crate::api::http::http::CustomProxy>>::sse_decode(deserializer);
                return crate::api::http::http::ProxySettings::CustomProxyList(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for (String, Vec<String>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <Vec<String>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (u32, u32) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <u32>::sse_decode(deserializer);
        let mut var_field1 = <u32>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::http::http::RedirectSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::http::http::RedirectSettings::NoRedirect;
            }
            1 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::http::http::RedirectSettings::LimitedRedirects(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::image::unscramble_image_rows::RowBlock {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_dy = <u32>::sse_decode(deserializer);
        let mut var_height = <u32>::sse_decode(deserializer);
        return crate::api::image::unscramble_image_rows::RowBlock {
            dy: var_dy,
            height: var_height,
        };
    }
}

impl SseDecode for crate::api::http::http::RustHttpRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_method = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_headers = <Option<Vec<(String, String)>>>::sse_decode(deserializer);
        let mut var_emulation =
            <Option<crate::api::http::http::Emulation>>::sse_decode(deserializer);
        let mut var_redirectSettings =
            <Option<crate::api::http::http::RedirectSettings>>::sse_decode(deserializer);
        let mut var_bodyBytes = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_httpVersionPref =
            <Option<crate::api::http::http::HttpVersionPref>>::sse_decode(deserializer);
        let mut var_timeoutSettings =
            <Option<crate::api::http::http::TimeoutSettings>>::sse_decode(deserializer);
        let mut var_throwOnStatusCode = <Option<bool>>::sse_decode(deserializer);
        let mut var_proxySettings =
            <Option<crate::api::http::http::ProxySettings>>::sse_decode(deserializer);
        let mut var_tlsSettings =
            <Option<crate::api::http::http::TlsSettings>>::sse_decode(deserializer);
        let mut var_dnsSettings =
            <Option<crate::api::http::http::DnsSettings>>::sse_decode(deserializer);
        let mut var_userAgent = <Option<String>>::sse_decode(deserializer);
        return crate::api::http::http::RustHttpRequest {
            method: var_method,
            url: var_url,
            headers: var_headers,
            emulation: var_emulation,
            redirect_settings: var_redirectSettings,
            body_bytes: var_bodyBytes,
            http_version_pref: var_httpVersionPref,
            timeout_settings: var_timeoutSettings,
            throw_on_status_code: var_throwOnStatusCode,
            proxy_settings: var_proxySettings,
            tls_settings: var_tlsSettings,
            dns_settings: var_dnsSettings,
            user_agent: var_userAgent,
        };
    }
}

impl SseDecode for crate::api::http::http::RustHttpResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_status = <u16>::sse_decode(deserializer);
        let mut var_headers = <Vec<(String, String)>>::sse_decode(deserializer);
        let mut var_body = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::http::http::RustHttpResponse {
            status: var_status,
            headers: var_headers,
            body: var_body,
        };
    }
}

impl SseDecode for crate::api::http::http::TimeoutSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_timeout = <Option<chrono::Duration>>::sse_decode(deserializer);
        let mut var_connectTimeout = <Option<chrono::Duration>>::sse_decode(deserializer);
        let mut var_keepAliveTimeout = <Option<chrono::Duration>>::sse_decode(deserializer);
        let mut var_keepAlivePing = <Option<chrono::Duration>>::sse_decode(deserializer);
        return crate::api::http::http::TimeoutSettings {
            timeout: var_timeout,
            connect_timeout: var_connectTimeout,
            keep_alive_timeout: var_keepAliveTimeout,
            keep_alive_ping: var_keepAlivePing,
        };
    }
}

impl SseDecode for crate::api::http::http::TlsSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_trustRootCertificates = <bool>::sse_decode(deserializer);
        let mut var_trustedRootCertificates = <Vec<Vec<u8>>>::sse_decode(deserializer);
        let mut var_verifyCertificates = <bool>::sse_decode(deserializer);
        let mut var_minTlsVersion =
            <Option<crate::api::http::http::TlsVersion>>::sse_decode(deserializer);
        let mut var_maxTlsVersion =
            <Option<crate::api::http::http::TlsVersion>>::sse_decode(deserializer);
        let mut var_sni = <bool>::sse_decode(deserializer);
        return crate::api::http::http::TlsSettings {
            trust_root_certificates: var_trustRootCertificates,
            trusted_root_certificates: var_trustedRootCertificates,
            verify_certificates: var_verifyCertificates,
            min_tls_version: var_minTlsVersion,
            max_tls_version: var_maxTlsVersion,
            sni: var_sni,
        };
    }
}

impl SseDecode for crate::api::http::http::TlsVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::http::http::TlsVersion::Tls1_2,
            1 => crate::api::http::http::TlsVersion::Tls1_3,
            _ => unreachable!("Invalid variant for TlsVersion: {}", inner),
        };
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        2 => wire__crate__api__image__auto_trim_image__auto_trim_image_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        4 => wire__crate__api__image__decode_image_rgba__decode_image_rgba_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        5 => wire__crate__api__image__get_image_size__get_image_size_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        7 => {
            wire__crate__api__http__http__rust_http_request_impl(port, ptr, rust_vec_len, data_len)
        }
        8 => wire__crate__api__image__unscramble_image__unscramble_image_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        9 => wire__crate__api__image__unscramble_image_columns__unscramble_image_columns_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        11 => wire__crate__api__image__unscramble_image_rows__unscramble_image_rows_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        3 => wire__crate__api__image__auto_trim_image__auto_trim_image_sync_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        6 => wire__crate__api__image__get_image_size__get_image_size_sync_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        10 => {
            wire__crate__api__image__unscramble_image_columns__unscramble_image_columns_sync_impl(
                ptr,
                rust_vec_len,
                data_len,
            )
        }
        12 => wire__crate__api__image__unscramble_image_rows__unscramble_image_rows_sync_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        13 => wire__crate__api__image__unscramble_image__unscramble_image_sync_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>>
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>>,
    > for Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::image::unscramble_image::Block {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.sx.into_into_dart().into_dart(),
            self.sy.into_into_dart().into_dart(),
            self.dx.into_into_dart().into_dart(),
            self.dy.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::image::unscramble_image::Block
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::image::unscramble_image::Block>
    for crate::api::image::unscramble_image::Block
{
    fn into_into_dart(self) -> crate::api::image::unscramble_image::Block {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::image::unscramble_image_columns::ColumnBlock {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.dx.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::image::unscramble_image_columns::ColumnBlock
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::image::unscramble_image_columns::ColumnBlock>
    for crate::api::image::unscramble_image_columns::ColumnBlock
{
    fn into_into_dart(self) -> crate::api::image::unscramble_image_columns::ColumnBlock {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::http::CustomProxy {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.url.into_into_dart().into_dart(),
            self.condition.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::http::CustomProxy
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::http::CustomProxy>
    for crate::api::http::http::CustomProxy
{
    fn into_into_dart(self) -> crate::api::http::http::CustomProxy {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::image::decode_image_rgba::DecodedImage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.pixels.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::image::decode_image_rgba::DecodedImage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::image::decode_image_rgba::DecodedImage>
    for crate::api::image::decode_image_rgba::DecodedImage
{
    fn into_into_dart(self) -> crate::api::image::decode_image_rgba::DecodedImage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::http::DnsSettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.overrides.into_into_dart().into_dart(),
            self.fallback.into_into_dart().into_dart(),
            self.resolver.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::http::DnsSettings
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::http::DnsSettings>
    for crate::api::http::http::DnsSettings
{
    fn into_into_dart(self) -> crate::api::http::http::DnsSettings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::http::Emulation {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Chrome100 => 0.into_dart(),
            Self::Chrome101 => 1.into_dart(),
            Self::Chrome104 => 2.into_dart(),
            Self::Chrome105 => 3.into_dart(),
            Self::Chrome106 => 4.into_dart(),
            Self::Chrome107 => 5.into_dart(),
            Self::Chrome108 => 6.into_dart(),
            Self::Chrome109 => 7.into_dart(),
            Self::Chrome110 => 8.into_dart(),
            Self::Chrome114 => 9.into_dart(),
            Self::Chrome116 => 10.into_dart(),
            Self::Chrome117 => 11.into_dart(),
            Self::Chrome118 => 12.into_dart(),
            Self::Chrome119 => 13.into_dart(),
            Self::Chrome120 => 14.into_dart(),
            Self::Chrome123 => 15.into_dart(),
            Self::Chrome124 => 16.into_dart(),
            Self::Chrome126 => 17.into_dart(),
            Self::Chrome127 => 18.into_dart(),
            Self::Chrome128 => 19.into_dart(),
            Self::Chrome129 => 20.into_dart(),
            Self::Chrome130 => 21.into_dart(),
            Self::Chrome131 => 22.into_dart(),
            Self::Chrome132 => 23.into_dart(),
            Self::Chrome133 => 24.into_dart(),
            Self::Chrome134 => 25.into_dart(),
            Self::Chrome135 => 26.into_dart(),
            Self::Chrome136 => 27.into_dart(),
            Self::SafariIos17_2 => 28.into_dart(),
            Self::SafariIos17_4_1 => 29.into_dart(),
            Self::SafariIos16_5 => 30.into_dart(),
            Self::Safari15_3 => 31.into_dart(),
            Self::Safari15_5 => 32.into_dart(),
            Self::Safari15_6_1 => 33.into_dart(),
            Self::Safari16 => 34.into_dart(),
            Self::Safari16_5 => 35.into_dart(),
            Self::Safari17_0 => 36.into_dart(),
            Self::Safari17_2_1 => 37.into_dart(),
            Self::Safari17_4_1 => 38.into_dart(),
            Self::Safari17_5 => 39.into_dart(),
            Self::Safari18 => 40.into_dart(),
            Self::SafariIPad18 => 41.into_dart(),
            Self::Safari18_2 => 42.into_dart(),
            Self::SafariIos18_1_1 => 43.into_dart(),
            Self::Safari18_3 => 44.into_dart(),
            Self::Safari18_3_1 => 45.into_dart(),
            Self::OkHttp3_9 => 46.into_dart(),
            Self::OkHttp3_11 => 47.into_dart(),
            Self::OkHttp3_13 => 48.into_dart(),
            Self::OkHttp3_14 => 49.into_dart(),
            Self::OkHttp4_9 => 50.into_dart(),
            Self::OkHttp4_10 => 51.into_dart(),
            Self::OkHttp4_12 => 52.into_dart(),
            Self::OkHttp5 => 53.into_dart(),
            Self::Edge101 => 54.into_dart(),
            Self::Edge122 => 55.into_dart(),
            Self::Edge127 => 56.into_dart(),
            Self::Edge131 => 57.into_dart(),
            Self::Edge134 => 58.into_dart(),
            Self::Firefox109 => 59.into_dart(),
            Self::Firefox117 => 60.into_dart(),
            Self::Firefox128 => 61.into_dart(),
            Self::Firefox133 => 62.into_dart(),
            Self::Firefox135 => 63.into_dart(),
            Self::FirefoxPrivate135 => 64.into_dart(),
            Self::FirefoxAndroid135 => 65.into_dart(),
            Self::Firefox136 => 66.into_dart(),
            Self::FirefoxPrivate136 => 67.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::http::Emulation
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::http::Emulation>
    for crate::api::http::http::Emulation
{
    fn into_into_dart(self) -> crate::api::http::http::Emulation {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::http::HttpVersionPref {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Http10 => 0.into_dart(),
            Self::Http11 => 1.into_dart(),
            Self::Http2 => 2.into_dart(),
            Self::All => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::http::HttpVersionPref
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::http::HttpVersionPref>
    for crate::api::http::http::HttpVersionPref
{
    fn into_into_dart(self) -> crate::api::http::http::HttpVersionPref {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::http::ProxyCondition {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Http => 0.into_dart(),
            Self::Https => 1.into_dart(),
            Self::All => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::http::ProxyCondition
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::http::ProxyCondition>
    for crate::api::http::http::ProxyCondition
{
    fn into_into_dart(self) -> crate::api::http::http::ProxyCondition {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::http::ProxySettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::http::http::ProxySettings::NoProxy => [0.into_dart()].into_dart(),
            crate::api::http::http::ProxySettings::CustomProxyList(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::http::ProxySettings
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::http::ProxySettings>
    for crate::api::http::http::ProxySettings
{
    fn into_into_dart(self) -> crate::api::http::http::ProxySettings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::http::RedirectSettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::http::http::RedirectSettings::NoRedirect => [0.into_dart()].into_dart(),
            crate::api::http::http::RedirectSettings::LimitedRedirects(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::http::RedirectSettings
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::http::RedirectSettings>
    for crate::api::http::http::RedirectSettings
{
    fn into_into_dart(self) -> crate::api::http::http::RedirectSettings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::image::unscramble_image_rows::RowBlock {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.dy.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::image::unscramble_image_rows::RowBlock
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::image::unscramble_image_rows::RowBlock>
    for crate::api::image::unscramble_image_rows::RowBlock
{
    fn into_into_dart(self) -> crate::api::image::unscramble_image_rows::RowBlock {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::http::RustHttpRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.method.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
            self.headers.into_into_dart().into_dart(),
            self.emulation.into_into_dart().into_dart(),
            self.redirect_settings.into_into_dart().into_dart(),
            self.body_bytes.into_into_dart().into_dart(),
            self.http_version_pref.into_into_dart().into_dart(),
            self.timeout_settings.into_into_dart().into_dart(),
            self.throw_on_status_code.into_into_dart().into_dart(),
            self.proxy_settings.into_into_dart().into_dart(),
            self.tls_settings.into_into_dart().into_dart(),
            self.dns_settings.into_into_dart().into_dart(),
            self.user_agent.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::http::RustHttpRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::http::RustHttpRequest>
    for crate::api::http::http::RustHttpRequest
{
    fn into_into_dart(self) -> crate::api::http::http::RustHttpRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::http::RustHttpResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.status.into_into_dart().into_dart(),
            self.headers.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::http::RustHttpResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::http::RustHttpResponse>
    for crate::api::http::http::RustHttpResponse
{
    fn into_into_dart(self) -> crate::api::http::http::RustHttpResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::http::TimeoutSettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.timeout.into_into_dart().into_dart(),
            self.connect_timeout.into_into_dart().into_dart(),
            self.keep_alive_timeout.into_into_dart().into_dart(),
            self.keep_alive_ping.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::http::TimeoutSettings
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::http::TimeoutSettings>
    for crate::api::http::http::TimeoutSettings
{
    fn into_into_dart(self) -> crate::api::http::http::TimeoutSettings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::http::TlsSettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.trust_root_certificates.into_into_dart().into_dart(),
            self.trusted_root_certificates.into_into_dart().into_dart(),
            self.verify_certificates.into_into_dart().into_dart(),
            self.min_tls_version.into_into_dart().into_dart(),
            self.max_tls_version.into_into_dart().into_dart(),
            self.sni.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::http::TlsSettings
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::http::TlsSettings>
    for crate::api::http::http::TlsSettings
{
    fn into_into_dart(self) -> crate::api::http::http::TlsSettings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::http::TlsVersion {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Tls1_2 => 0.into_dart(),
            Self::Tls1_3 => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::http::TlsVersion
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::http::TlsVersion>
    for crate::api::http::http::TlsVersion
{
    fn into_into_dart(self) -> crate::api::http::http::TlsVersion {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for chrono::Duration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(
            self.num_microseconds()
                .expect("cannot get microseconds from time"),
            serializer,
        );
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::image::unscramble_image::Block {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.sx, serializer);
        <u32>::sse_encode(self.sy, serializer);
        <u32>::sse_encode(self.dx, serializer);
        <u32>::sse_encode(self.dy, serializer);
        <u32>::sse_encode(self.width, serializer);
        <u32>::sse_encode(self.height, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::image::unscramble_image_columns::ColumnBlock {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.dx, serializer);
        <u32>::sse_encode(self.width, serializer);
    }
}

impl SseEncode for crate::api::http::http::CustomProxy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.url, serializer);
        <crate::api::http::http::ProxyCondition>::sse_encode(self.condition, serializer);
    }
}

impl SseEncode for crate::api::image::decode_image_rgba::DecodedImage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.pixels, serializer);
        <u32>::sse_encode(self.width, serializer);
        <u32>::sse_encode(self.height, serializer);
    }
}

impl SseEncode for crate::api::http::http::DnsSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<Vec<(String, Vec<String>)>>>::sse_encode(self.overrides, serializer);
        <Option<String>>::sse_encode(self.fallback, serializer);
        <Option<Arc < dyn Fn (String) -> DartFnFuture < Vec < String > > + 'static + Send + Sync >>>::sse_encode(self.resolver, serializer);
    }
}

impl SseEncode for crate::api::http::http::Emulation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::http::http::Emulation::Chrome100 => 0,
                crate::api::http::http::Emulation::Chrome101 => 1,
                crate::api::http::http::Emulation::Chrome104 => 2,
                crate::api::http::http::Emulation::Chrome105 => 3,
                crate::api::http::http::Emulation::Chrome106 => 4,
                crate::api::http::http::Emulation::Chrome107 => 5,
                crate::api::http::http::Emulation::Chrome108 => 6,
                crate::api::http::http::Emulation::Chrome109 => 7,
                crate::api::http::http::Emulation::Chrome110 => 8,
                crate::api::http::http::Emulation::Chrome114 => 9,
                crate::api::http::http::Emulation::Chrome116 => 10,
                crate::api::http::http::Emulation::Chrome117 => 11,
                crate::api::http::http::Emulation::Chrome118 => 12,
                crate::api::http::http::Emulation::Chrome119 => 13,
                crate::api::http::http::Emulation::Chrome120 => 14,
                crate::api::http::http::Emulation::Chrome123 => 15,
                crate::api::http::http::Emulation::Chrome124 => 16,
                crate::api::http::http::Emulation::Chrome126 => 17,
                crate::api::http::http::Emulation::Chrome127 => 18,
                crate::api::http::http::Emulation::Chrome128 => 19,
                crate::api::http::http::Emulation::Chrome129 => 20,
                crate::api::http::http::Emulation::Chrome130 => 21,
                crate::api::http::http::Emulation::Chrome131 => 22,
                crate::api::http::http::Emulation::Chrome132 => 23,
                crate::api::http::http::Emulation::Chrome133 => 24,
                crate::api::http::http::Emulation::Chrome134 => 25,
                crate::api::http::http::Emulation::Chrome135 => 26,
                crate::api::http::http::Emulation::Chrome136 => 27,
                crate::api::http::http::Emulation::SafariIos17_2 => 28,
                crate::api::http::http::Emulation::SafariIos17_4_1 => 29,
                crate::api::http::http::Emulation::SafariIos16_5 => 30,
                crate::api::http::http::Emulation::Safari15_3 => 31,
                crate::api::http::http::Emulation::Safari15_5 => 32,
                crate::api::http::http::Emulation::Safari15_6_1 => 33,
                crate::api::http::http::Emulation::Safari16 => 34,
                crate::api::http::http::Emulation::Safari16_5 => 35,
                crate::api::http::http::Emulation::Safari17_0 => 36,
                crate::api::http::http::Emulation::Safari17_2_1 => 37,
                crate::api::http::http::Emulation::Safari17_4_1 => 38,
                crate::api::http::http::Emulation::Safari17_5 => 39,
                crate::api::http::http::Emulation::Safari18 => 40,
                crate::api::http::http::Emulation::SafariIPad18 => 41,
                crate::api::http::http::Emulation::Safari18_2 => 42,
                crate::api::http::http::Emulation::SafariIos18_1_1 => 43,
                crate::api::http::http::Emulation::Safari18_3 => 44,
                crate::api::http::http::Emulation::Safari18_3_1 => 45,
                crate::api::http::http::Emulation::OkHttp3_9 => 46,
                crate::api::http::http::Emulation::OkHttp3_11 => 47,
                crate::api::http::http::Emulation::OkHttp3_13 => 48,
                crate::api::http::http::Emulation::OkHttp3_14 => 49,
                crate::api::http::http::Emulation::OkHttp4_9 => 50,
                crate::api::http::http::Emulation::OkHttp4_10 => 51,
                crate::api::http::http::Emulation::OkHttp4_12 => 52,
                crate::api::http::http::Emulation::OkHttp5 => 53,
                crate::api::http::http::Emulation::Edge101 => 54,
                crate::api::http::http::Emulation::Edge122 => 55,
                crate::api::http::http::Emulation::Edge127 => 56,
                crate::api::http::http::Emulation::Edge131 => 57,
                crate::api::http::http::Emulation::Edge134 => 58,
                crate::api::http::http::Emulation::Firefox109 => 59,
                crate::api::http::http::Emulation::Firefox117 => 60,
                crate::api::http::http::Emulation::Firefox128 => 61,
                crate::api::http::http::Emulation::Firefox133 => 62,
                crate::api::http::http::Emulation::Firefox135 => 63,
                crate::api::http::http::Emulation::FirefoxPrivate135 => 64,
                crate::api::http::http::Emulation::FirefoxAndroid135 => 65,
                crate::api::http::http::Emulation::Firefox136 => 66,
                crate::api::http::http::Emulation::FirefoxPrivate136 => 67,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::http::http::HttpVersionPref {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::http::http::HttpVersionPref::Http10 => 0,
                crate::api::http::http::HttpVersionPref::Http11 => 1,
                crate::api::http::http::HttpVersionPref::Http2 => 2,
                crate::api::http::http::HttpVersionPref::All => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::image::unscramble_image::Block> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::image::unscramble_image::Block>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::image::unscramble_image_columns::ColumnBlock> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::image::unscramble_image_columns::ColumnBlock>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::http::http::CustomProxy> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::http::http::CustomProxy>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Vec<u8>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, Vec<String>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, Vec<String>)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::image::unscramble_image_rows::RowBlock> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::image::unscramble_image_rows::RowBlock>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<chrono::Duration> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::Duration>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::http::http::DnsSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::http::http::DnsSettings>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::http::http::Emulation> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::http::http::Emulation>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::http::http::HttpVersionPref> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::http::http::HttpVersionPref>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::http::http::ProxySettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::http::http::ProxySettings>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::http::http::RedirectSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::http::http::RedirectSettings>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::http::http::TimeoutSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::http::http::TimeoutSettings>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::http::http::TlsSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::http::http::TlsSettings>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::http::http::TlsVersion> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::http::http::TlsVersion>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<(String, Vec<String>)>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<(String, Vec<String>)>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<(String, String)>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<(String, String)>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::http::http::ProxyCondition {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::http::http::ProxyCondition::Http => 0,
                crate::api::http::http::ProxyCondition::Https => 1,
                crate::api::http::http::ProxyCondition::All => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::http::http::ProxySettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::http::http::ProxySettings::NoProxy => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::http::http::ProxySettings::CustomProxyList(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<crate::api::http::http::CustomProxy>>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for (String, Vec<String>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <Vec<String>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (u32, u32) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.0, serializer);
        <u32>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::http::http::RedirectSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::http::http::RedirectSettings::NoRedirect => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::http::http::RedirectSettings::LimitedRedirects(field0) => {
                <i32>::sse_encode(1, serializer);
                <i32>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::image::unscramble_image_rows::RowBlock {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.dy, serializer);
        <u32>::sse_encode(self.height, serializer);
    }
}

impl SseEncode for crate::api::http::http::RustHttpRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.method, serializer);
        <String>::sse_encode(self.url, serializer);
        <Option<Vec<(String, String)>>>::sse_encode(self.headers, serializer);
        <Option<crate::api::http::http::Emulation>>::sse_encode(self.emulation, serializer);
        <Option<crate::api::http::http::RedirectSettings>>::sse_encode(
            self.redirect_settings,
            serializer,
        );
        <Option<Vec<u8>>>::sse_encode(self.body_bytes, serializer);
        <Option<crate::api::http::http::HttpVersionPref>>::sse_encode(
            self.http_version_pref,
            serializer,
        );
        <Option<crate::api::http::http::TimeoutSettings>>::sse_encode(
            self.timeout_settings,
            serializer,
        );
        <Option<bool>>::sse_encode(self.throw_on_status_code, serializer);
        <Option<crate::api::http::http::ProxySettings>>::sse_encode(
            self.proxy_settings,
            serializer,
        );
        <Option<crate::api::http::http::TlsSettings>>::sse_encode(self.tls_settings, serializer);
        <Option<crate::api::http::http::DnsSettings>>::sse_encode(self.dns_settings, serializer);
        <Option<String>>::sse_encode(self.user_agent, serializer);
    }
}

impl SseEncode for crate::api::http::http::RustHttpResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u16>::sse_encode(self.status, serializer);
        <Vec<(String, String)>>::sse_encode(self.headers, serializer);
        <Vec<u8>>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::api::http::http::TimeoutSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<chrono::Duration>>::sse_encode(self.timeout, serializer);
        <Option<chrono::Duration>>::sse_encode(self.connect_timeout, serializer);
        <Option<chrono::Duration>>::sse_encode(self.keep_alive_timeout, serializer);
        <Option<chrono::Duration>>::sse_encode(self.keep_alive_ping, serializer);
    }
}

impl SseEncode for crate::api::http::http::TlsSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.trust_root_certificates, serializer);
        <Vec<Vec<u8>>>::sse_encode(self.trusted_root_certificates, serializer);
        <bool>::sse_encode(self.verify_certificates, serializer);
        <Option<crate::api::http::http::TlsVersion>>::sse_encode(self.min_tls_version, serializer);
        <Option<crate::api::http::http::TlsVersion>>::sse_encode(self.max_tls_version, serializer);
        <bool>::sse_encode(self.sni, serializer);
    }
}

impl SseEncode for crate::api::http::http::TlsVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::http::http::TlsVersion::Tls1_2 => 0,
                crate::api::http::http::TlsVersion::Tls1_3 => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use crate::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_hoyomi_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_hoyomi_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use crate::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> DartFnFuture<Vec<String>> + 'static + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;
