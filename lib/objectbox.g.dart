// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/book.dart';
import 'models/cookie_manager.dart';
import 'models/history_chap.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 467868298171071382),
      name: 'CookieManager',
      lastPropertyId: const obx_int.IdUid(6, 7145296396540811112),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1680825469337091918),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5403774220271394909),
            name: 'uid',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(1, 4629393216024584336)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5033094197426888969),
            name: 'cookie',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3801108359953735194),
            name: 'signed',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1522807935238184597),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7145296396540811112),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 543336033245577724),
      name: 'HistoryChap',
      lastPropertyId: const obx_int.IdUid(10, 4262285313195286598),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6018428055908753189),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8768488944261328457),
            name: 'chapterId',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(13, 2758580868992847083)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4931870967431599689),
            name: 'maxPage',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6170490173772464811),
            name: 'createdAt',
            type: 10,
            flags: 8,
            indexId: const obx_int.IdUid(14, 7121066938777367334)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 9013248811264991965),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 267203821701067187),
            name: 'bookId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(12, 8604043526778469154),
            relationTarget: 'Book'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4262285313195286598),
            name: 'currentPage',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 771120293153708254),
      name: 'Book',
      lastPropertyId: const obx_int.IdUid(10, 8569686577469091632),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4671081638999240693),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2993372140994533555),
            name: 'uid',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(8, 8146473334841952138)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7084005066000857281),
            name: 'sourceId',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(10, 7338232709860526296)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2822226123442008313),
            name: 'bookId',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(11, 8451366379250607204)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1260106737100877984),
            name: 'meta',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3703352462940281809),
            name: 'createdAt',
            type: 10,
            flags: 8,
            indexId: const obx_int.IdUid(15, 4118770546462258946)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5524208815019802735),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8688100150259443389),
            name: 'followedAt',
            type: 10,
            flags: 8,
            indexId: const obx_int.IdUid(16, 5111818506217927819)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8569686577469091632),
            name: 'status',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'histories', srcEntity: 'HistoryChap', srcField: 'book')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(6, 771120293153708254),
      lastIndexId: const obx_int.IdUid(16, 5111818506217927819),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        6474866504552882787,
        5235800775085215685,
        6414348118960353247
      ],
      retiredIndexUids: const [
        1909055743016127838,
        6392601258012245816,
        2526711134783795624,
        448388629847560654
      ],
      retiredPropertyUids: const [
        1693076251926902469,
        4701568764721583358,
        3404847523460889847,
        7463999986077159809,
        7602500965213928340,
        8333492720185785726,
        3864616561366308774,
        8229869474889028217,
        7428467369408170119,
        8730452247177966208,
        5906579048044863701,
        7397819899799866581,
        5933649955424895525,
        9216528730135213475,
        5640596592996888749,
        2602562502974985537,
        4448237795589367830,
        1323312489478435984,
        2048747041403121910
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CookieManager: obx_int.EntityDefinition<CookieManager>(
        model: _entities[0],
        toOneRelations: (CookieManager object) => [],
        toManyRelations: (CookieManager object) => {},
        getId: (CookieManager object) => object.id,
        setId: (CookieManager object, int id) {
          object.id = id;
        },
        objectToFB: (CookieManager object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final cookieOffset = fbb.writeString(object.cookie);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, cookieOffset);
          fbb.addBool(3, object.signed);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final cookieParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final signedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = CookieManager(
              id: idParam,
              uid: uidParam,
              cookie: cookieParam,
              signed: signedParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);

          return object;
        }),
    HistoryChap: obx_int.EntityDefinition<HistoryChap>(
        model: _entities[1],
        toOneRelations: (HistoryChap object) => [object.book],
        toManyRelations: (HistoryChap object) => {},
        getId: (HistoryChap object) => object.id,
        setId: (HistoryChap object, int id) {
          object.id = id;
        },
        objectToFB: (HistoryChap object, fb.Builder fbb) {
          final chapterIdOffset = fbb.writeString(object.chapterId);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(3, chapterIdOffset);
          fbb.addInt64(5, object.maxPage);
          fbb.addInt64(6, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(7, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(8, object.book.targetId);
          fbb.addFloat64(9, object.currentPage);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final chapterIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final currentPageParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final maxPageParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final object = HistoryChap(
              id: idParam,
              chapterId: chapterIdParam,
              currentPage: currentPageParam,
              maxPage: maxPageParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          object.book.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.book.attach(store);
          return object;
        }),
    Book: obx_int.EntityDefinition<Book>(
        model: _entities[2],
        toOneRelations: (Book object) => [],
        toManyRelations: (Book object) => {
              obx_int.RelInfo<HistoryChap>.toOneBacklink(
                      9, object.id, (HistoryChap srcObject) => srcObject.book):
                  object.histories
            },
        getId: (Book object) => object.id,
        setId: (Book object, int id) {
          object.id = id;
        },
        objectToFB: (Book object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final sourceIdOffset = fbb.writeString(object.sourceId);
          final bookIdOffset = fbb.writeString(object.bookId);
          final metaOffset = fbb.writeString(object.meta);
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, sourceIdOffset);
          fbb.addOffset(3, bookIdOffset);
          fbb.addOffset(4, metaOffset);
          fbb.addInt64(6, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(7, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(8, object.followedAt?.millisecondsSinceEpoch);
          fbb.addOffset(9, statusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final followedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final sourceIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final bookIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final metaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final followedAtParam = followedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(followedAtValue);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final object = Book(
              id: idParam,
              sourceId: sourceIdParam,
              bookId: bookIdParam,
              status: statusParam,
              meta: metaParam,
              followedAt: followedAtParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam)
            ..uid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');
          obx_int.InternalToManyAccess.setRelInfo<Book>(
              object.histories,
              store,
              obx_int.RelInfo<HistoryChap>.toOneBacklink(
                  9, object.id, (HistoryChap srcObject) => srcObject.book));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CookieManager] entity fields to define ObjectBox queries.
class CookieManager_ {
  /// See [CookieManager.id].
  static final id =
      obx.QueryIntegerProperty<CookieManager>(_entities[0].properties[0]);

  /// See [CookieManager.uid].
  static final uid =
      obx.QueryStringProperty<CookieManager>(_entities[0].properties[1]);

  /// See [CookieManager.cookie].
  static final cookie =
      obx.QueryStringProperty<CookieManager>(_entities[0].properties[2]);

  /// See [CookieManager.signed].
  static final signed =
      obx.QueryBooleanProperty<CookieManager>(_entities[0].properties[3]);

  /// See [CookieManager.createdAt].
  static final createdAt =
      obx.QueryDateProperty<CookieManager>(_entities[0].properties[4]);

  /// See [CookieManager.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<CookieManager>(_entities[0].properties[5]);
}

/// [HistoryChap] entity fields to define ObjectBox queries.
class HistoryChap_ {
  /// See [HistoryChap.id].
  static final id =
      obx.QueryIntegerProperty<HistoryChap>(_entities[1].properties[0]);

  /// See [HistoryChap.chapterId].
  static final chapterId =
      obx.QueryStringProperty<HistoryChap>(_entities[1].properties[1]);

  /// See [HistoryChap.maxPage].
  static final maxPage =
      obx.QueryIntegerProperty<HistoryChap>(_entities[1].properties[2]);

  /// See [HistoryChap.createdAt].
  static final createdAt =
      obx.QueryDateProperty<HistoryChap>(_entities[1].properties[3]);

  /// See [HistoryChap.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<HistoryChap>(_entities[1].properties[4]);

  /// See [HistoryChap.book].
  static final book =
      obx.QueryRelationToOne<HistoryChap, Book>(_entities[1].properties[5]);

  /// See [HistoryChap.currentPage].
  static final currentPage =
      obx.QueryDoubleProperty<HistoryChap>(_entities[1].properties[6]);
}

/// [Book] entity fields to define ObjectBox queries.
class Book_ {
  /// See [Book.id].
  static final id = obx.QueryIntegerProperty<Book>(_entities[2].properties[0]);

  /// See [Book.uid].
  static final uid = obx.QueryStringProperty<Book>(_entities[2].properties[1]);

  /// See [Book.sourceId].
  static final sourceId =
      obx.QueryStringProperty<Book>(_entities[2].properties[2]);

  /// See [Book.bookId].
  static final bookId =
      obx.QueryStringProperty<Book>(_entities[2].properties[3]);

  /// See [Book.meta].
  static final meta = obx.QueryStringProperty<Book>(_entities[2].properties[4]);

  /// See [Book.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Book>(_entities[2].properties[5]);

  /// See [Book.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Book>(_entities[2].properties[6]);

  /// See [Book.followedAt].
  static final followedAt =
      obx.QueryDateProperty<Book>(_entities[2].properties[7]);

  /// See [Book.status].
  static final status =
      obx.QueryStringProperty<Book>(_entities[2].properties[8]);

  /// see [Book.histories]
  static final histories =
      obx.QueryBacklinkToMany<HistoryChap, Book>(HistoryChap_.book);
}
