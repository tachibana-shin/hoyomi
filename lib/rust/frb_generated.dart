// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/http/http.dart';
import 'api/http/utils/socket_addr.dart';
import 'api/image/auto_trim_image.dart';
import 'api/image/decode_image_rgba.dart';
import 'api/image/get_image_size.dart';
import 'api/image/unscramble_image.dart';
import 'api/image/unscramble_image_columns.dart';
import 'api/image/unscramble_image_rows.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -865860840;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_hoyomi',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<Uint8List> crateApiImageAutoTrimImageAutoTrimImage({
    required List<int> image,
  });

  Uint8List crateApiImageAutoTrimImageAutoTrimImageSync({
    required List<int> image,
  });

  Future<DecodedImage> crateApiImageDecodeImageRgbaDecodeImageRgba({
    required List<int> imageData,
  });

  Future<(int, int)> crateApiImageGetImageSizeGetImageSize({
    required List<int> data,
  });

  (int, int) crateApiImageGetImageSizeGetImageSizeSync({
    required List<int> data,
  });

  Future<RustHttpResponse> crateApiHttpHttpRustHttpRequest({
    required RustHttpRequest req,
  });

  Future<Uint8List> crateApiImageUnscrambleImageUnscrambleImage({
    required List<int> imageData,
    required List<Block> blocks,
    required bool autoTrim,
  });

  Future<Uint8List> crateApiImageUnscrambleImageColumnsUnscrambleImageColumns({
    required List<int> imageData,
    required List<ColumnBlock> blocks,
    required bool autoTrim,
  });

  Uint8List crateApiImageUnscrambleImageColumnsUnscrambleImageColumnsSync({
    required List<int> imageData,
    required List<ColumnBlock> blocks,
    required bool autoTrim,
  });

  Future<Uint8List> crateApiImageUnscrambleImageRowsUnscrambleImageRows({
    required List<int> imageData,
    required List<RowBlock> blocks,
    required bool autoTrim,
  });

  Uint8List crateApiImageUnscrambleImageRowsUnscrambleImageRowsSync({
    required List<int> imageData,
    required List<RowBlock> blocks,
    required bool autoTrim,
  });

  Uint8List crateApiImageUnscrambleImageUnscrambleImageSync({
    required List<int> imageData,
    required List<Block> blocks,
    required bool autoTrim,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcFnStringDartFnFutureVecString;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcFnStringDartFnFutureVecString;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ArcFnStringDartFnFutureVecStringPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Uint8List> crateApiImageAutoTrimImageAutoTrimImage({
    required List<int> image,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(image, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiImageAutoTrimImageAutoTrimImageConstMeta,
        argValues: [image],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiImageAutoTrimImageAutoTrimImageConstMeta =>
      const TaskConstMeta(debugName: "auto_trim_image", argNames: ["image"]);

  @override
  Uint8List crateApiImageAutoTrimImageAutoTrimImageSync({
    required List<int> image,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(image, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiImageAutoTrimImageAutoTrimImageSyncConstMeta,
        argValues: [image],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiImageAutoTrimImageAutoTrimImageSyncConstMeta =>
      const TaskConstMeta(
        debugName: "auto_trim_image_sync",
        argNames: ["image"],
      );

  @override
  Future<DecodedImage> crateApiImageDecodeImageRgbaDecodeImageRgba({
    required List<int> imageData,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(imageData, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_decoded_image,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiImageDecodeImageRgbaDecodeImageRgbaConstMeta,
        argValues: [imageData],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiImageDecodeImageRgbaDecodeImageRgbaConstMeta =>
      const TaskConstMeta(
        debugName: "decode_image_rgba",
        argNames: ["imageData"],
      );

  @override
  Future<(int, int)> crateApiImageGetImageSizeGetImageSize({
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_u_32_u_32,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiImageGetImageSizeGetImageSizeConstMeta,
        argValues: [data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiImageGetImageSizeGetImageSizeConstMeta =>
      const TaskConstMeta(debugName: "get_image_size", argNames: ["data"]);

  @override
  (int, int) crateApiImageGetImageSizeGetImageSizeSync({
    required List<int> data,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(data, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_u_32_u_32,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiImageGetImageSizeGetImageSizeSyncConstMeta,
        argValues: [data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiImageGetImageSizeGetImageSizeSyncConstMeta =>
      const TaskConstMeta(debugName: "get_image_size_sync", argNames: ["data"]);

  @override
  Future<RustHttpResponse> crateApiHttpHttpRustHttpRequest({
    required RustHttpRequest req,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_rust_http_request(req, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_rust_http_response,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiHttpHttpRustHttpRequestConstMeta,
        argValues: [req],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiHttpHttpRustHttpRequestConstMeta =>
      const TaskConstMeta(debugName: "rust_http_request", argNames: ["req"]);

  @override
  Future<Uint8List> crateApiImageUnscrambleImageUnscrambleImage({
    required List<int> imageData,
    required List<Block> blocks,
    required bool autoTrim,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(imageData, serializer);
          sse_encode_list_block(blocks, serializer);
          sse_encode_bool(autoTrim, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiImageUnscrambleImageUnscrambleImageConstMeta,
        argValues: [imageData, blocks, autoTrim],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiImageUnscrambleImageUnscrambleImageConstMeta =>
      const TaskConstMeta(
        debugName: "unscramble_image",
        argNames: ["imageData", "blocks", "autoTrim"],
      );

  @override
  Future<Uint8List> crateApiImageUnscrambleImageColumnsUnscrambleImageColumns({
    required List<int> imageData,
    required List<ColumnBlock> blocks,
    required bool autoTrim,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(imageData, serializer);
          sse_encode_list_column_block(blocks, serializer);
          sse_encode_bool(autoTrim, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_String,
        ),
        constMeta:
            kCrateApiImageUnscrambleImageColumnsUnscrambleImageColumnsConstMeta,
        argValues: [imageData, blocks, autoTrim],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiImageUnscrambleImageColumnsUnscrambleImageColumnsConstMeta =>
      const TaskConstMeta(
        debugName: "unscramble_image_columns",
        argNames: ["imageData", "blocks", "autoTrim"],
      );

  @override
  Uint8List crateApiImageUnscrambleImageColumnsUnscrambleImageColumnsSync({
    required List<int> imageData,
    required List<ColumnBlock> blocks,
    required bool autoTrim,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(imageData, serializer);
          sse_encode_list_column_block(blocks, serializer);
          sse_encode_bool(autoTrim, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_String,
        ),
        constMeta:
            kCrateApiImageUnscrambleImageColumnsUnscrambleImageColumnsSyncConstMeta,
        argValues: [imageData, blocks, autoTrim],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiImageUnscrambleImageColumnsUnscrambleImageColumnsSyncConstMeta =>
      const TaskConstMeta(
        debugName: "unscramble_image_columns_sync",
        argNames: ["imageData", "blocks", "autoTrim"],
      );

  @override
  Future<Uint8List> crateApiImageUnscrambleImageRowsUnscrambleImageRows({
    required List<int> imageData,
    required List<RowBlock> blocks,
    required bool autoTrim,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(imageData, serializer);
          sse_encode_list_row_block(blocks, serializer);
          sse_encode_bool(autoTrim, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_String,
        ),
        constMeta:
            kCrateApiImageUnscrambleImageRowsUnscrambleImageRowsConstMeta,
        argValues: [imageData, blocks, autoTrim],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiImageUnscrambleImageRowsUnscrambleImageRowsConstMeta =>
      const TaskConstMeta(
        debugName: "unscramble_image_rows",
        argNames: ["imageData", "blocks", "autoTrim"],
      );

  @override
  Uint8List crateApiImageUnscrambleImageRowsUnscrambleImageRowsSync({
    required List<int> imageData,
    required List<RowBlock> blocks,
    required bool autoTrim,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(imageData, serializer);
          sse_encode_list_row_block(blocks, serializer);
          sse_encode_bool(autoTrim, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_String,
        ),
        constMeta:
            kCrateApiImageUnscrambleImageRowsUnscrambleImageRowsSyncConstMeta,
        argValues: [imageData, blocks, autoTrim],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiImageUnscrambleImageRowsUnscrambleImageRowsSyncConstMeta =>
      const TaskConstMeta(
        debugName: "unscramble_image_rows_sync",
        argNames: ["imageData", "blocks", "autoTrim"],
      );

  @override
  Uint8List crateApiImageUnscrambleImageUnscrambleImageSync({
    required List<int> imageData,
    required List<Block> blocks,
    required bool autoTrim,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(imageData, serializer);
          sse_encode_list_block(blocks, serializer);
          sse_encode_bool(autoTrim, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiImageUnscrambleImageUnscrambleImageSyncConstMeta,
        argValues: [imageData, blocks, autoTrim],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiImageUnscrambleImageUnscrambleImageSyncConstMeta =>
      const TaskConstMeta(
        debugName: "unscramble_image_sync",
        argNames: ["imageData", "blocks", "autoTrim"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcFnStringDartFnFutureVecString => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcFnStringDartFnFutureVecString => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcFnStringDartFnFutureVecString
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcFnStringDartFnFutureVecStringImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  Duration dco_decode_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeDuration(dco_decode_i_64(raw).toInt());
  }

  @protected
  ArcFnStringDartFnFutureVecString
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcFnStringDartFnFutureVecStringImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  SocketAddrDigester dco_decode_TraitDef_SocketAddrDigester(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  Block dco_decode_block(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Block(
      sx: dco_decode_u_32(arr[0]),
      sy: dco_decode_u_32(arr[1]),
      dx: dco_decode_u_32(arr[2]),
      dy: dco_decode_u_32(arr[3]),
      width: dco_decode_u_32(arr[4]),
      height: dco_decode_u_32(arr[5]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ArcFnStringDartFnFutureVecString
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
      raw,
    );
  }

  @protected
  Duration dco_decode_box_autoadd_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Duration(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DnsSettings dco_decode_box_autoadd_dns_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dns_settings(raw);
  }

  @protected
  Emulation dco_decode_box_autoadd_emulation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_emulation(raw);
  }

  @protected
  HttpVersionPref dco_decode_box_autoadd_http_version_pref(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_http_version_pref(raw);
  }

  @protected
  ProxySettings dco_decode_box_autoadd_proxy_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_proxy_settings(raw);
  }

  @protected
  RedirectSettings dco_decode_box_autoadd_redirect_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_redirect_settings(raw);
  }

  @protected
  RustHttpRequest dco_decode_box_autoadd_rust_http_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_rust_http_request(raw);
  }

  @protected
  TimeoutSettings dco_decode_box_autoadd_timeout_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_timeout_settings(raw);
  }

  @protected
  TlsSettings dco_decode_box_autoadd_tls_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tls_settings(raw);
  }

  @protected
  TlsVersion dco_decode_box_autoadd_tls_version(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tls_version(raw);
  }

  @protected
  ColumnBlock dco_decode_column_block(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ColumnBlock(
      dx: dco_decode_u_32(arr[0]),
      width: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  CustomProxy dco_decode_custom_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CustomProxy(
      url: dco_decode_String(arr[0]),
      condition: dco_decode_proxy_condition(arr[1]),
    );
  }

  @protected
  DecodedImage dco_decode_decoded_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DecodedImage(
      pixels: dco_decode_list_prim_u_8_strict(arr[0]),
      width: dco_decode_u_32(arr[1]),
      height: dco_decode_u_32(arr[2]),
    );
  }

  @protected
  DnsSettings dco_decode_dns_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DnsSettings(
      overrides: dco_decode_opt_list_record_string_list_string(arr[0]),
      fallback: dco_decode_opt_String(arr[1]),
      resolver:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
            arr[2],
          ),
    );
  }

  @protected
  Emulation dco_decode_emulation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Emulation.values[raw as int];
  }

  @protected
  HttpVersionPref dco_decode_http_version_pref(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HttpVersionPref.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Block> dco_decode_list_block(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_block).toList();
  }

  @protected
  List<ColumnBlock> dco_decode_list_column_block(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_column_block).toList();
  }

  @protected
  List<CustomProxy> dco_decode_list_custom_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_custom_proxy).toList();
  }

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_prim_u_8_strict).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, List<String>)> dco_decode_list_record_string_list_string(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_list_string)
        .toList();
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<RowBlock> dco_decode_list_row_block(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_row_block).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  ArcFnStringDartFnFutureVecString?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
            raw,
          );
  }

  @protected
  Duration? dco_decode_opt_box_autoadd_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Duration(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  DnsSettings? dco_decode_opt_box_autoadd_dns_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_dns_settings(raw);
  }

  @protected
  Emulation? dco_decode_opt_box_autoadd_emulation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_emulation(raw);
  }

  @protected
  HttpVersionPref? dco_decode_opt_box_autoadd_http_version_pref(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_http_version_pref(raw);
  }

  @protected
  ProxySettings? dco_decode_opt_box_autoadd_proxy_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_proxy_settings(raw);
  }

  @protected
  RedirectSettings? dco_decode_opt_box_autoadd_redirect_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_redirect_settings(raw);
  }

  @protected
  TimeoutSettings? dco_decode_opt_box_autoadd_timeout_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_timeout_settings(raw);
  }

  @protected
  TlsSettings? dco_decode_opt_box_autoadd_tls_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_tls_settings(raw);
  }

  @protected
  TlsVersion? dco_decode_opt_box_autoadd_tls_version(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_tls_version(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  List<(String, List<String>)>? dco_decode_opt_list_record_string_list_string(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_record_string_list_string(raw);
  }

  @protected
  List<(String, String)>? dco_decode_opt_list_record_string_string(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_record_string_string(raw);
  }

  @protected
  ProxyCondition dco_decode_proxy_condition(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProxyCondition.values[raw as int];
  }

  @protected
  ProxySettings dco_decode_proxy_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ProxySettings_NoProxy();
      case 1:
        return ProxySettings_CustomProxyList(
          dco_decode_list_custom_proxy(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  (String, List<String>) dco_decode_record_string_list_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_list_String(arr[1]));
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_String(arr[1]));
  }

  @protected
  (int, int) dco_decode_record_u_32_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_u_32(arr[0]), dco_decode_u_32(arr[1]));
  }

  @protected
  RedirectSettings dco_decode_redirect_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return RedirectSettings_NoRedirect();
      case 1:
        return RedirectSettings_LimitedRedirects(dco_decode_i_32(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  RowBlock dco_decode_row_block(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RowBlock(
      dy: dco_decode_u_32(arr[0]),
      height: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  RustHttpRequest dco_decode_rust_http_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return RustHttpRequest(
      method: dco_decode_String(arr[0]),
      url: dco_decode_String(arr[1]),
      headers: dco_decode_opt_list_record_string_string(arr[2]),
      emulation: dco_decode_opt_box_autoadd_emulation(arr[3]),
      redirectSettings: dco_decode_opt_box_autoadd_redirect_settings(arr[4]),
      bodyBytes: dco_decode_opt_list_prim_u_8_strict(arr[5]),
      httpVersionPref: dco_decode_opt_box_autoadd_http_version_pref(arr[6]),
      timeoutSettings: dco_decode_opt_box_autoadd_timeout_settings(arr[7]),
      throwOnStatusCode: dco_decode_opt_box_autoadd_bool(arr[8]),
      proxySettings: dco_decode_opt_box_autoadd_proxy_settings(arr[9]),
      tlsSettings: dco_decode_opt_box_autoadd_tls_settings(arr[10]),
      dnsSettings: dco_decode_opt_box_autoadd_dns_settings(arr[11]),
      userAgent: dco_decode_opt_String(arr[12]),
    );
  }

  @protected
  RustHttpResponse dco_decode_rust_http_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return RustHttpResponse(
      status: dco_decode_u_16(arr[0]),
      headers: dco_decode_list_record_string_string(arr[1]),
      body: dco_decode_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  TimeoutSettings dco_decode_timeout_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TimeoutSettings(
      timeout: dco_decode_opt_box_autoadd_Chrono_Duration(arr[0]),
      connectTimeout: dco_decode_opt_box_autoadd_Chrono_Duration(arr[1]),
      keepAliveTimeout: dco_decode_opt_box_autoadd_Chrono_Duration(arr[2]),
      keepAlivePing: dco_decode_opt_box_autoadd_Chrono_Duration(arr[3]),
    );
  }

  @protected
  TlsSettings dco_decode_tls_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return TlsSettings(
      trustRootCertificates: dco_decode_bool(arr[0]),
      trustedRootCertificates: dco_decode_list_list_prim_u_8_strict(arr[1]),
      verifyCertificates: dco_decode_bool(arr[2]),
      minTlsVersion: dco_decode_opt_box_autoadd_tls_version(arr[3]),
      maxTlsVersion: dco_decode_opt_box_autoadd_tls_version(arr[4]),
      sni: dco_decode_bool(arr[5]),
    );
  }

  @protected
  TlsVersion dco_decode_tls_version(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TlsVersion.values[raw as int];
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcFnStringDartFnFutureVecString
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcFnStringDartFnFutureVecStringImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Duration sse_decode_Chrono_Duration(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return Duration(microseconds: inner.toInt());
  }

  @protected
  ArcFnStringDartFnFutureVecString
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcFnStringDartFnFutureVecStringImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Block sse_decode_block(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sx = sse_decode_u_32(deserializer);
    var var_sy = sse_decode_u_32(deserializer);
    var var_dx = sse_decode_u_32(deserializer);
    var var_dy = sse_decode_u_32(deserializer);
    var var_width = sse_decode_u_32(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    return Block(
      sx: var_sx,
      sy: var_sy,
      dx: var_dx,
      dy: var_dy,
      width: var_width,
      height: var_height,
    );
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ArcFnStringDartFnFutureVecString
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
      deserializer,
    ));
  }

  @protected
  Duration sse_decode_box_autoadd_Chrono_Duration(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Duration(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  DnsSettings sse_decode_box_autoadd_dns_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dns_settings(deserializer));
  }

  @protected
  Emulation sse_decode_box_autoadd_emulation(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_emulation(deserializer));
  }

  @protected
  HttpVersionPref sse_decode_box_autoadd_http_version_pref(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_http_version_pref(deserializer));
  }

  @protected
  ProxySettings sse_decode_box_autoadd_proxy_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_proxy_settings(deserializer));
  }

  @protected
  RedirectSettings sse_decode_box_autoadd_redirect_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_redirect_settings(deserializer));
  }

  @protected
  RustHttpRequest sse_decode_box_autoadd_rust_http_request(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_rust_http_request(deserializer));
  }

  @protected
  TimeoutSettings sse_decode_box_autoadd_timeout_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_timeout_settings(deserializer));
  }

  @protected
  TlsSettings sse_decode_box_autoadd_tls_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tls_settings(deserializer));
  }

  @protected
  TlsVersion sse_decode_box_autoadd_tls_version(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tls_version(deserializer));
  }

  @protected
  ColumnBlock sse_decode_column_block(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dx = sse_decode_u_32(deserializer);
    var var_width = sse_decode_u_32(deserializer);
    return ColumnBlock(dx: var_dx, width: var_width);
  }

  @protected
  CustomProxy sse_decode_custom_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_String(deserializer);
    var var_condition = sse_decode_proxy_condition(deserializer);
    return CustomProxy(url: var_url, condition: var_condition);
  }

  @protected
  DecodedImage sse_decode_decoded_image(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pixels = sse_decode_list_prim_u_8_strict(deserializer);
    var var_width = sse_decode_u_32(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    return DecodedImage(
      pixels: var_pixels,
      width: var_width,
      height: var_height,
    );
  }

  @protected
  DnsSettings sse_decode_dns_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_overrides = sse_decode_opt_list_record_string_list_string(
      deserializer,
    );
    var var_fallback = sse_decode_opt_String(deserializer);
    var var_resolver =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
          deserializer,
        );
    return DnsSettings(
      overrides: var_overrides,
      fallback: var_fallback,
      resolver: var_resolver,
    );
  }

  @protected
  Emulation sse_decode_emulation(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Emulation.values[inner];
  }

  @protected
  HttpVersionPref sse_decode_http_version_pref(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return HttpVersionPref.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Block> sse_decode_list_block(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Block>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_block(deserializer));
    }
    return ans_;
  }

  @protected
  List<ColumnBlock> sse_decode_list_column_block(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ColumnBlock>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_column_block(deserializer));
    }
    return ans_;
  }

  @protected
  List<CustomProxy> sse_decode_list_custom_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CustomProxy>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_custom_proxy(deserializer));
    }
    return ans_;
  }

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Uint8List>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, List<String>)> sse_decode_list_record_string_list_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, List<String>)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_list_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<RowBlock> sse_decode_list_row_block(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RowBlock>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_row_block(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ArcFnStringDartFnFutureVecString?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  Duration? sse_decode_opt_box_autoadd_Chrono_Duration(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Duration(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DnsSettings? sse_decode_opt_box_autoadd_dns_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_dns_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Emulation? sse_decode_opt_box_autoadd_emulation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_emulation(deserializer));
    } else {
      return null;
    }
  }

  @protected
  HttpVersionPref? sse_decode_opt_box_autoadd_http_version_pref(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_http_version_pref(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProxySettings? sse_decode_opt_box_autoadd_proxy_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_proxy_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RedirectSettings? sse_decode_opt_box_autoadd_redirect_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_redirect_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TimeoutSettings? sse_decode_opt_box_autoadd_timeout_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_timeout_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TlsSettings? sse_decode_opt_box_autoadd_tls_settings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_tls_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TlsVersion? sse_decode_opt_box_autoadd_tls_version(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_tls_version(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<(String, List<String>)>? sse_decode_opt_list_record_string_list_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_record_string_list_string(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<(String, String)>? sse_decode_opt_list_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_record_string_string(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProxyCondition sse_decode_proxy_condition(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ProxyCondition.values[inner];
  }

  @protected
  ProxySettings sse_decode_proxy_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return ProxySettings_NoProxy();
      case 1:
        var var_field0 = sse_decode_list_custom_proxy(deserializer);
        return ProxySettings_CustomProxyList(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  (String, List<String>) sse_decode_record_string_list_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_list_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_u_32_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_32(deserializer);
    var var_field1 = sse_decode_u_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  RedirectSettings sse_decode_redirect_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return RedirectSettings_NoRedirect();
      case 1:
        var var_field0 = sse_decode_i_32(deserializer);
        return RedirectSettings_LimitedRedirects(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  RowBlock sse_decode_row_block(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dy = sse_decode_u_32(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    return RowBlock(dy: var_dy, height: var_height);
  }

  @protected
  RustHttpRequest sse_decode_rust_http_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_method = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_headers = sse_decode_opt_list_record_string_string(deserializer);
    var var_emulation = sse_decode_opt_box_autoadd_emulation(deserializer);
    var var_redirectSettings = sse_decode_opt_box_autoadd_redirect_settings(
      deserializer,
    );
    var var_bodyBytes = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_httpVersionPref = sse_decode_opt_box_autoadd_http_version_pref(
      deserializer,
    );
    var var_timeoutSettings = sse_decode_opt_box_autoadd_timeout_settings(
      deserializer,
    );
    var var_throwOnStatusCode = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_proxySettings = sse_decode_opt_box_autoadd_proxy_settings(
      deserializer,
    );
    var var_tlsSettings = sse_decode_opt_box_autoadd_tls_settings(deserializer);
    var var_dnsSettings = sse_decode_opt_box_autoadd_dns_settings(deserializer);
    var var_userAgent = sse_decode_opt_String(deserializer);
    return RustHttpRequest(
      method: var_method,
      url: var_url,
      headers: var_headers,
      emulation: var_emulation,
      redirectSettings: var_redirectSettings,
      bodyBytes: var_bodyBytes,
      httpVersionPref: var_httpVersionPref,
      timeoutSettings: var_timeoutSettings,
      throwOnStatusCode: var_throwOnStatusCode,
      proxySettings: var_proxySettings,
      tlsSettings: var_tlsSettings,
      dnsSettings: var_dnsSettings,
      userAgent: var_userAgent,
    );
  }

  @protected
  RustHttpResponse sse_decode_rust_http_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_status = sse_decode_u_16(deserializer);
    var var_headers = sse_decode_list_record_string_string(deserializer);
    var var_body = sse_decode_list_prim_u_8_strict(deserializer);
    return RustHttpResponse(
      status: var_status,
      headers: var_headers,
      body: var_body,
    );
  }

  @protected
  TimeoutSettings sse_decode_timeout_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_timeout = sse_decode_opt_box_autoadd_Chrono_Duration(deserializer);
    var var_connectTimeout = sse_decode_opt_box_autoadd_Chrono_Duration(
      deserializer,
    );
    var var_keepAliveTimeout = sse_decode_opt_box_autoadd_Chrono_Duration(
      deserializer,
    );
    var var_keepAlivePing = sse_decode_opt_box_autoadd_Chrono_Duration(
      deserializer,
    );
    return TimeoutSettings(
      timeout: var_timeout,
      connectTimeout: var_connectTimeout,
      keepAliveTimeout: var_keepAliveTimeout,
      keepAlivePing: var_keepAlivePing,
    );
  }

  @protected
  TlsSettings sse_decode_tls_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_trustRootCertificates = sse_decode_bool(deserializer);
    var var_trustedRootCertificates = sse_decode_list_list_prim_u_8_strict(
      deserializer,
    );
    var var_verifyCertificates = sse_decode_bool(deserializer);
    var var_minTlsVersion = sse_decode_opt_box_autoadd_tls_version(
      deserializer,
    );
    var var_maxTlsVersion = sse_decode_opt_box_autoadd_tls_version(
      deserializer,
    );
    var var_sni = sse_decode_bool(deserializer);
    return TlsSettings(
      trustRootCertificates: var_trustRootCertificates,
      trustedRootCertificates: var_trustedRootCertificates,
      verifyCertificates: var_verifyCertificates,
      minTlsVersion: var_minTlsVersion,
      maxTlsVersion: var_maxTlsVersion,
      sni: var_sni,
    );
  }

  @protected
  TlsVersion sse_decode_tls_version(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TlsVersion.values[inner];
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
    ArcFnStringDartFnFutureVecString self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcFnStringDartFnFutureVecStringImpl).frbInternalSseEncode(
        move: true,
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_Chrono_Duration(Duration self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(PlatformInt64Util.from(self.inMicroseconds), serializer);
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
    ArcFnStringDartFnFutureVecString self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcFnStringDartFnFutureVecStringImpl).frbInternalSseEncode(
        move: null,
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_block(Block self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.sx, serializer);
    sse_encode_u_32(self.sy, serializer);
    sse_encode_u_32(self.dx, serializer);
    sse_encode_u_32(self.dy, serializer);
    sse_encode_u_32(self.width, serializer);
    sse_encode_u_32(self.height, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
    ArcFnStringDartFnFutureVecString self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Duration(
    Duration self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Duration(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dns_settings(
    DnsSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dns_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_emulation(
    Emulation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_emulation(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_http_version_pref(
    HttpVersionPref self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_http_version_pref(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_proxy_settings(
    ProxySettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_proxy_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_redirect_settings(
    RedirectSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_redirect_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_rust_http_request(
    RustHttpRequest self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_rust_http_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_timeout_settings(
    TimeoutSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_timeout_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tls_settings(
    TlsSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tls_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tls_version(
    TlsVersion self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tls_version(self, serializer);
  }

  @protected
  void sse_encode_column_block(ColumnBlock self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.dx, serializer);
    sse_encode_u_32(self.width, serializer);
  }

  @protected
  void sse_encode_custom_proxy(CustomProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.url, serializer);
    sse_encode_proxy_condition(self.condition, serializer);
  }

  @protected
  void sse_encode_decoded_image(DecodedImage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.pixels, serializer);
    sse_encode_u_32(self.width, serializer);
    sse_encode_u_32(self.height, serializer);
  }

  @protected
  void sse_encode_dns_settings(DnsSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_list_record_string_list_string(self.overrides, serializer);
    sse_encode_opt_String(self.fallback, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
      self.resolver,
      serializer,
    );
  }

  @protected
  void sse_encode_emulation(Emulation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_http_version_pref(
    HttpVersionPref self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_block(List<Block> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_block(item, serializer);
    }
  }

  @protected
  void sse_encode_list_column_block(
    List<ColumnBlock> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_column_block(item, serializer);
    }
  }

  @protected
  void sse_encode_list_custom_proxy(
    List<CustomProxy> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_custom_proxy(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_prim_u_8_strict(
    List<Uint8List> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(
      self is Uint8List ? self : Uint8List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_list_string(
    List<(String, List<String>)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_list_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_row_block(
    List<RowBlock> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_row_block(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
    ArcFnStringDartFnFutureVecString? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDartFnFutureVecStringstaticSendSync(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Duration(
    Duration? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Duration(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_dns_settings(
    DnsSettings? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_dns_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_emulation(
    Emulation? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_emulation(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_http_version_pref(
    HttpVersionPref? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_http_version_pref(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_proxy_settings(
    ProxySettings? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_proxy_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_redirect_settings(
    RedirectSettings? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_redirect_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_timeout_settings(
    TimeoutSettings? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_timeout_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_tls_settings(
    TlsSettings? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_tls_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_tls_version(
    TlsVersion? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_tls_version(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
    Uint8List? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_record_string_list_string(
    List<(String, List<String>)>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_record_string_list_string(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_record_string_string(
    List<(String, String)>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_record_string_string(self, serializer);
    }
  }

  @protected
  void sse_encode_proxy_condition(
    ProxyCondition self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_proxy_settings(ProxySettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ProxySettings_NoProxy():
        sse_encode_i_32(0, serializer);
      case ProxySettings_CustomProxyList(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_custom_proxy(field0, serializer);
    }
  }

  @protected
  void sse_encode_record_string_list_string(
    (String, List<String>) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_list_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_32_u_32((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.$1, serializer);
    sse_encode_u_32(self.$2, serializer);
  }

  @protected
  void sse_encode_redirect_settings(
    RedirectSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case RedirectSettings_NoRedirect():
        sse_encode_i_32(0, serializer);
      case RedirectSettings_LimitedRedirects(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_row_block(RowBlock self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.dy, serializer);
    sse_encode_u_32(self.height, serializer);
  }

  @protected
  void sse_encode_rust_http_request(
    RustHttpRequest self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.method, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_opt_list_record_string_string(self.headers, serializer);
    sse_encode_opt_box_autoadd_emulation(self.emulation, serializer);
    sse_encode_opt_box_autoadd_redirect_settings(
      self.redirectSettings,
      serializer,
    );
    sse_encode_opt_list_prim_u_8_strict(self.bodyBytes, serializer);
    sse_encode_opt_box_autoadd_http_version_pref(
      self.httpVersionPref,
      serializer,
    );
    sse_encode_opt_box_autoadd_timeout_settings(
      self.timeoutSettings,
      serializer,
    );
    sse_encode_opt_box_autoadd_bool(self.throwOnStatusCode, serializer);
    sse_encode_opt_box_autoadd_proxy_settings(self.proxySettings, serializer);
    sse_encode_opt_box_autoadd_tls_settings(self.tlsSettings, serializer);
    sse_encode_opt_box_autoadd_dns_settings(self.dnsSettings, serializer);
    sse_encode_opt_String(self.userAgent, serializer);
  }

  @protected
  void sse_encode_rust_http_response(
    RustHttpResponse self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.status, serializer);
    sse_encode_list_record_string_string(self.headers, serializer);
    sse_encode_list_prim_u_8_strict(self.body, serializer);
  }

  @protected
  void sse_encode_timeout_settings(
    TimeoutSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_Chrono_Duration(self.timeout, serializer);
    sse_encode_opt_box_autoadd_Chrono_Duration(self.connectTimeout, serializer);
    sse_encode_opt_box_autoadd_Chrono_Duration(
      self.keepAliveTimeout,
      serializer,
    );
    sse_encode_opt_box_autoadd_Chrono_Duration(self.keepAlivePing, serializer);
  }

  @protected
  void sse_encode_tls_settings(TlsSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.trustRootCertificates, serializer);
    sse_encode_list_list_prim_u_8_strict(
      self.trustedRootCertificates,
      serializer,
    );
    sse_encode_bool(self.verifyCertificates, serializer);
    sse_encode_opt_box_autoadd_tls_version(self.minTlsVersion, serializer);
    sse_encode_opt_box_autoadd_tls_version(self.maxTlsVersion, serializer);
    sse_encode_bool(self.sni, serializer);
  }

  @protected
  void sse_encode_tls_version(TlsVersion self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ArcFnStringDartFnFutureVecStringImpl extends RustOpaque
    implements ArcFnStringDartFnFutureVecString {
  // Not to be used by end users
  ArcFnStringDartFnFutureVecStringImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcFnStringDartFnFutureVecStringImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_ArcFnStringDartFnFutureVecString,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ArcFnStringDartFnFutureVecString,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ArcFnStringDartFnFutureVecStringPtr,
  );
}
