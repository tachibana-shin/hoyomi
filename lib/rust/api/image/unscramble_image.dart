// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `do_unscramble_image`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

Future<Uint8List> unscrambleImage({
  required List<int> imageData,
  required List<Block> blocks,
  required bool autoTrim,
}) => RustLib.instance.api.crateApiImageUnscrambleImageUnscrambleImage(
  imageData: imageData,
  blocks: blocks,
  autoTrim: autoTrim,
);

Uint8List unscrambleImageSync({
  required List<int> imageData,
  required List<Block> blocks,
  required bool autoTrim,
}) => RustLib.instance.api.crateApiImageUnscrambleImageUnscrambleImageSync(
  imageData: imageData,
  blocks: blocks,
  autoTrim: autoTrim,
);

class Block {
  final int sx;
  final int sy;
  final int dx;
  final int dy;
  final int width;
  final int height;

  const Block({
    required this.sx,
    required this.sy,
    required this.dx,
    required this.dy,
    required this.width,
    required this.height,
  });

  @override
  int get hashCode =>
      sx.hashCode ^
      sy.hashCode ^
      dx.hashCode ^
      dy.hashCode ^
      width.hashCode ^
      height.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Block &&
          runtimeType == other.runtimeType &&
          sx == other.sx &&
          sy == other.sy &&
          dx == other.dx &&
          dy == other.dy &&
          width == other.width &&
          height == other.height;
}
